#pragma checksum "/home/jonoe/ForecastApp/Pages/Index.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c50a1ae9b35d7e68d94a608df0df227b0076e813"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ForecastApp.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "/home/jonoe/ForecastApp/_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#line 2 "/home/jonoe/ForecastApp/_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#line 3 "/home/jonoe/ForecastApp/_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#line 4 "/home/jonoe/ForecastApp/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#line 5 "/home/jonoe/ForecastApp/_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#line 6 "/home/jonoe/ForecastApp/_Imports.razor"
using ForecastApp;

#line default
#line hidden
#line 7 "/home/jonoe/ForecastApp/_Imports.razor"
using ForecastApp.Shared;

#line default
#line hidden
#line 2 "/home/jonoe/ForecastApp/Pages/Index.razor"
using ForecastApp.Models;

#line default
#line hidden
#line 3 "/home/jonoe/ForecastApp/Pages/Index.razor"
using System.Text;

#line default
#line hidden
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#line 28 "/home/jonoe/ForecastApp/Pages/Index.razor"
       

    string message = "Loading...";
    Position pos;
    OpenWeather forecast;

    private async Task GetForecast()
    {
    // lat={lat}&lon={lon}&exclude={part}&appid={API key}
        string APIkey = "5311eb7f79f937f3c7cee34bc6170494";

        StringBuilder url = new StringBuilder();
        url.Append("https://api.openweathermap.org/data/2.5/");
        url.Append("onecall?");
        url.Append("lat=");
        url.Append(pos.Latitude);
        url.Append("&lon=");
        url.Append(pos.Longitude);
        url.Append("&exclude=");
        url.Append("current,minutely,hourly,alerts");
        url.Append("&units=metric");
        url.Append("&lang=sp");
        url.Append("&appid=");
        url.Append(APIkey);

        forecast = await Http
            .GetJsonAsync<OpenWeather>(url.ToString());
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetPosition();
            await GetForecast();
        }
        catch (Exception)
        {
            message = "Error encountered";
        }
        ;
    }

    private async Task GetPosition()
    {
        pos = await Js.InvokeAsync<Position>(
            "bweInterop.getPosition");
    }


#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime Js { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
